// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	csakey "github.com/smartcontractkit/chainlink/core/services/keystore/keys/csakey"

	mock "github.com/stretchr/testify/mock"
)

// CSA is an autogenerated mock type for the CSA type
type CSA struct {
	mock.Mock
}

// CountCSAKeys provides a mock function with given fields:
func (_m *CSA) CountCSAKeys() (int64, error) {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCSAKey provides a mock function with given fields:
func (_m *CSA) CreateCSAKey() (*csakey.KeyV2, error) {
	ret := _m.Called()

	var r0 *csakey.KeyV2
	if rf, ok := ret.Get(0).(func() *csakey.KeyV2); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*csakey.KeyV2)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportKey provides a mock function with given fields: _a0, _a1
func (_m *CSA) ExportKey(_a0 string, _a1 string) ([]byte, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string) []byte); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetV1KeysAsV2 provides a mock function with given fields:
func (_m *CSA) GetV1KeysAsV2() ([]csakey.KeyV2, error) {
	ret := _m.Called()

	var r0 []csakey.KeyV2
	if rf, ok := ret.Get(0).(func() []csakey.KeyV2); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]csakey.KeyV2)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportKey provides a mock function with given fields: _a0, _a1
func (_m *CSA) ImportKey(_a0 []byte, _a1 string) (csakey.KeyV2, error) {
	ret := _m.Called(_a0, _a1)

	var r0 csakey.KeyV2
	if rf, ok := ret.Get(0).(func([]byte, string) csakey.KeyV2); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(csakey.KeyV2)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCSAKeys provides a mock function with given fields:
func (_m *CSA) ListCSAKeys() ([]csakey.KeyV2, error) {
	ret := _m.Called()

	var r0 []csakey.KeyV2
	if rf, ok := ret.Get(0).(func() []csakey.KeyV2); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]csakey.KeyV2)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
